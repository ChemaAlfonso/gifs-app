{"version":3,"sources":["serviceWorker.js","components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","helpers/uniqueRandom.js","components/GifGrid.js","hooks/useFetchGifs.js","GifApp.js","index.js"],"names":["Boolean","window","location","hostname","match","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","cat","length","className","type","value","onChange","target","GifGridItem","id","title","url","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","meta","status","gifs","map","img","images","downsized_medium","newRandNumber","Date","getTime","toString","Math","random","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","key","GifApp","categories","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCfOC,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAW9C,OACI,0BAAMC,SAPY,SAACC,GACnBA,EAAEC,iBACFN,GAAe,SAAAO,GAAG,OAAIL,EAAWM,OAAS,EAApB,CAAyBN,GAAzB,mBAAwCK,IAAxC,YAAmDA,MACzEJ,EAAe,MAKX,2BACAM,UAAU,WACVC,KAAK,OACLC,MAAQT,EACRU,SAbc,SAACP,GAAD,OAAOF,EAAeE,EAAEQ,OAAOF,YCL5CG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAErC,OACI,yBAAKR,UAAU,sDACX,yBAAKS,IAAMD,EAAME,IAAMH,M,uBCNtBI,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbL,EADa,0FAC6EM,UAAWF,GADxF,sBAEAG,MAAOP,GAFP,cAEbQ,EAFa,gBAGQA,EAAKC,OAHb,mBAGZC,EAHY,EAGZA,KAEa,MALD,EAGNC,KAEJC,OALU,0CAKc,IALd,eAObC,EAAOH,EAAKI,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHjB,GAAIiB,EAAIjB,GACRC,MAAOgB,EAAIhB,MACXC,IAAG,UAAEe,EAAIC,cAAN,aAAE,EAAYC,iBAAiBjB,QAXvB,kBAeZa,GAfY,4CAAH,sDCAPK,EAAgB,kBAAM,IAAIC,MAAOC,UAAUC,WAA6B,OAAhBC,KAAKC,UCK7DC,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAe,IAAD,EACdpB,mBAAS,CAC/B0B,KAAM,GACNe,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAcxC,OARAC,qBAAW,WACPzB,EAASC,GACRyB,MAAM,SAAAnB,GAAI,OAAIiB,EAAS,CACpBjB,KAAMA,EACNe,SAAS,SAEd,CAAErB,IAEEsB,EDV0BI,CAAc1B,GAAlCY,EAFwB,EAE7BN,KAAae,EAFgB,EAEhBA,QAErB,OACI,6BACI,4BAAMrB,GACJqB,GAAW,4CACVA,GAA6B,IAAlBT,EAAOzB,QAAgB,oDACrC,yBAAKC,UAAU,qBAEPwB,EAAOF,KAAK,SAAEC,GAAF,OACR,kBAAC,EAAD,eACIgB,IAAMhB,EAAIjB,GAAKoB,KACVH,UEElBiB,EAhBA,WAAO,IAAD,EAEmBhD,mBAAS,CAAC,SAF7B,mBAEViD,EAFU,KAEElD,EAFF,KAIjB,OACI,oCACI,wCACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BACA,4BACMkD,EAAWnB,KAAK,SAAAxB,GAAG,OAAI,kBAAC,EAAD,CAASyC,IAAMzC,EAAM4B,IAAkBd,SAAWd,UCT3F4C,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SR2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBX,MAAK,SAAAY,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.802c9d2f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const changeHandler = (e) => setInputValue( e.target.value );\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        setCategories( cat => inputValue.length > 0 ? [inputValue, ...cat] : [...cat] );\r\n        setInputValue( '' );\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={ submitHandler }>\r\n            <input \r\n            className=\"addField\"\r\n            type=\"text\"\r\n            value={ inputValue }\r\n            onChange={ changeHandler }\r\n            ></input>\r\n        </form>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n\r\n    return (\r\n        <div className=\"grid-img-wrapper animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title }/>\r\n        </div>\r\n    )\r\n}\r\n","export const getGifs = async ( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=p6vD8N2C8x98BRwq6YAtDw1AT5lwz5Fs&q=${ encodeURI( category ) }&limit=10`;\r\n    const resp = await fetch( url );\r\n    const {data, meta} = await resp.json();\r\n\r\n    if( meta.status !== 200 ) return [];\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    \r\n    return gifs;\r\n}","export const newRandNumber = () => new Date().getTime().toString() + Math.random() * 999999;","import React from 'react';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { newRandNumber } from '../helpers/uniqueRandom';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <div>\r\n            <h3>{ category }</h3>\r\n            { loading && <h2>Cargando...</h2>}\r\n            { !loading && images.length === 0 && <h2>No hay coincidencias</h2>}\r\n            <div className=\"grid-imgs-wrapper\">\r\n                { \r\n                    images.map( ( img ) => (\r\n                        <GifGridItem \r\n                            key={ img.id + newRandNumber() } \r\n                            { ...img } \r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    \r\n    useEffect( () => {\r\n        getGifs( category )\r\n        .then( data => setState({\r\n            data: data,\r\n            loading: false\r\n        }));\r\n    }, [ category ]);\r\n\r\n    return state;\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\nimport { newRandNumber } from './helpers/uniqueRandom';\r\n\r\nconst GifApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['CSGO']);\r\n\r\n    return (\r\n        <>\r\n            <h2>Gifs App</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr/>\r\n            <ol>\r\n                { categories.map( cat => <GifGrid key={ cat + newRandNumber() } category={ cat } />) }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport GifApp from './GifApp';\n\nReactDOM.render(\n  <GifApp />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}